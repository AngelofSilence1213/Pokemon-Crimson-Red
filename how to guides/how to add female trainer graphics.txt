
Bit 0 of wram location $D721 (called wUnusedD721) determines the sex of the player. 
A 0 makes for a boy and 1 makes for a girl.
Normally this wram location goes unused. Make a note in wram.asm for your reference.


The .png file for the female trainer front sprite goes in the pic/trainer folder.
Rename it to red_f.png

The .png file for the female trainer back sprite goes in the pic/trainer folder.
Rename it to redb_f.png

The .png file for the female trainer overworld sprite goes in the gfx/sprites folder.
Rename it to redf.png

The .png file for the female trainer cycling sprite goes in the gfx/sprites folder.
Rename it to cyclingf.png



Create a custom_functions/func_overworld.asm file. Then add to it the following functions:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Overworld female trainer sprite functions
LoadRedSpriteToDE:
	ld de, RedFSprite
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale
	ld de, RedSprite
.donefemale
	res 2, a
	ld [wUnusedD721], a
	ret
	
LoadSeelSpriteToDE:
	ld de, SeelSprite
	ld a, [wUnusedD721]
	set 2, a	;regardless if boy or girl, need to set override bit to use the regular sprite bank
	ld [wUnusedD721], a
	ret

LoadRedCyclingSpriteToDE:
	ld de, RedFCyclingSprite
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale
	ld de, RedCyclingSprite
.donefemale
	res 2, a
	ld [wUnusedD721], a
	ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to engine/hall_of_fame.asm and overwrite the HoFLoadPlayerPics function with the following:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HoFLoadPlayerPics:
;joenote - support female trainer sprite
	ld de, RedPicFFront
	ld a, BANK(RedPicFFront)
	
	;need to preserve the bank value in A
	push de
	ld d, a
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	;need to get the bank value back in A
	ld a, d
	pop de
	
	jr nz, .donefemale_front
	ld de, RedPicFront
	ld a, BANK(RedPicFront)
.donefemale_front
	call UncompressSpriteFromDE
	ld hl, sSpriteBuffer1
	ld de, sSpriteBuffer0
	ld bc, $310
	call CopyData
	ld de, vFrontPic
	call InterlaceMergeSpriteBuffers
;joenote - support female trainer sprite
	ld de, RedPicFBack
	ld a, BANK(RedPicFBack)
	
	;need to preserve the bank value in A
	push de
	ld d, a
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	;need to get the bank value back in A
	ld a, d
	pop de
	
	jr nz, .donefemale_back
	ld de, RedPicBack
	ld a, BANK(RedPicBack)
.donefemale_back
	call UncompressSpriteFromDE
	predef ScaleSpriteByTwo
	ld de, vBackPic
	call InterlaceMergeSpriteBuffers
	ld c, $1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	



Go to engine/battle/core.asm and overwrite the LoadPlayerBackPic function with the following function:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LoadPlayerBackPic:
	ld a, [wBattleType]
	dec a ; is it the old man tutorial?
	ld de, RedPicBack
	jr nz, .redback
	ld de, OldManPic
	jr .bankred
.redback
	ld a, [wUnusedD721]
	bit 0, a	;check if female trainer
	jr z, .bankred	;go to the normal red sprite bank if boy
	;else load girl sprites
	ld de, RedPicFBack
	ld a, BANK(RedPicFBack)
	jr .next
.bankred
	ld a, BANK(RedPicBack)
.next
	call UncompressSpriteFromDE
	predef ScaleSpriteByTwo
	ld hl, wOAMBuffer
	xor a
	ld [hOAMTile], a ; initial tile number
	ld b, $7 ; 7 columns
	ld e, $a0 ; X for the left-most column
.loop ; each loop iteration writes 3 OAM entries in a vertical column
	ld c, $3 ; 3 tiles per column
	ld d, $38 ; Y for the top of each column
.innerLoop ; each loop iteration writes 1 OAM entry in the column
	ld [hl], d ; OAM Y
	inc hl
	ld [hl], e ; OAM X
	ld a, $8 ; height of tile
	add d ; increase Y by height of tile
	ld d, a
	inc hl
	ld a, [hOAMTile]
	ld [hli], a ; OAM tile number
	inc a ; increment tile number
	ld [hOAMTile], a
	inc hl
	dec c
	jr nz, .innerLoop
	ld a, [hOAMTile]
	add $4 ; increase tile number by 4
	ld [hOAMTile], a
	ld a, $8 ; width of tile
	add e ; increase X by width of tile
	ld e, a
	dec b
	jr nz, .loop
	ld de, vBackPic
	call InterlaceMergeSpriteBuffers
	ld a, $a
	ld [$0], a
	xor a
	ld [$4000], a
	ld hl, vSprites
	ld de, sSpriteBuffer1
	ld a, [H_LOADEDROMBANK]
	ld b, a
	ld c, 7 * 7
	call CopyVideoData
	xor a
	ld [$0], a
	ld a, $31
	ld [hStartTileID], a
	coord hl, 1, 5
	predef_jump CopyUncompressedPicToTilemap
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to engine/menu/start_sub_menus.asm and and overwrite the LoadPlayerBackPic function with the following function:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawTrainerInfo:
;support female trainer sprite
	ld de, RedPicFFront
	lb bc, BANK(RedPicFFront), $01
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale_front
	ld de, RedPicFront
	lb bc, BANK(RedPicFront), $01
.donefemale_front
	predef DisplayPicCenteredOrUpperRight
	call DisableLCD
	coord hl, 0, 2
	ld a, " "
	call TrainerInfo_DrawVerticalLine
	coord hl, 1, 2
	call TrainerInfo_DrawVerticalLine
	ld hl, vChars2 + $70
	ld de, vChars2
	ld bc, $70 * 4
	call CopyData
	ld hl, TrainerInfoTextBoxTileGraphics ; trainer info text box tile patterns
	ld de, vChars2 + $770
	ld bc, $0080
	push bc
	call TrainerInfo_FarCopyData
	ld hl, BlankLeaderNames
	ld de, vChars2 + $600
	ld bc, $0170
	call TrainerInfo_FarCopyData
	pop bc
	ld hl, BadgeNumbersTileGraphics  ; badge number tile patterns
	ld de, vChars1 + $580
	call TrainerInfo_FarCopyData
	ld hl, GymLeaderFaceAndBadgeTileGraphics  ; gym leader face and badge tile patterns
	ld de, vChars2 + $200
	ld bc, $0400
	ld a, $03
	call FarCopyData2
	ld hl, TextBoxGraphics
	ld de, $00d0
	add hl, de ; hl = colon tile pattern
	ld de, vChars1 + $560
	ld bc, $0010
	ld a, $04
	push bc
	call FarCopyData2
	pop bc
	ld hl, TrainerInfoTextBoxTileGraphics + $80  ; background tile pattern
	ld de, vChars1 + $570
	call TrainerInfo_FarCopyData
	call EnableLCD
	ld hl, wTrainerInfoTextBoxWidthPlus1
	ld a, 18 + 1
	ld [hli], a
	dec a
	ld [hli], a
	ld [hl], 1
	coord hl, 0, 0
	call TrainerInfo_DrawTextBox
	ld hl, wTrainerInfoTextBoxWidthPlus1
	ld a, 16 + 1
	ld [hli], a
	dec a
	ld [hli], a
	ld [hl], 3
	coord hl, 1, 10
	call TrainerInfo_DrawTextBox
	coord hl, 0, 10
	ld a, $d7
	call TrainerInfo_DrawVerticalLine
	coord hl, 19, 10
	call TrainerInfo_DrawVerticalLine
	coord hl, 6, 9
	ld de, TrainerInfo_BadgesText
	call PlaceString
	coord hl, 2, 2
	ld de, TrainerInfo_NameMoneyTimeText
	call PlaceString
	coord hl, 7, 2
	ld de, wPlayerName
	call PlaceString
	coord hl, 8, 4
	ld de, wPlayerMoney
	ld c, $e3
	call PrintBCDNumber
	coord hl, 9, 6
	ld de, wPlayTimeHours ; hours
	lb bc, LEFT_ALIGN | 1, 3
	call PrintNumber
	ld [hl], $d6 ; colon tile ID
	inc hl
	ld de, wPlayTimeMinutes ; minutes
	lb bc, LEADING_ZEROES | 1, 2
	jp PrintNumber
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to engine/overworld/player_animations.asm and and overwrite the first chunk of the FishingAnim function with the following:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FishingAnim:
	ld c, 10
	call DelayFrames
	ld hl, wd736
	set 6, [hl] ; reserve the last 4 OAM entries
;support female trainer sprite
	push af
	ld de, RedFSprite
	lb bc, BANK(RedFSprite), $c
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale
	ld de, RedSprite
	lb bc, BANK(RedSprite), $c
.donefemale
	pop af
	ld hl, vNPCSprites
	call CopyVideoData
	ld a, $4
	ld hl, RedFishingTiles
	call LoadAnimSpriteGfx
	ld a, [wSpriteStateData1 + 2]
	ld c, a
	ld b, $0
	ld hl, FishingRodOAM
	add hl, bc
	ld de, wOAMBuffer + $9c
	ld bc, $4
	call CopyData
	ld c, 100
	call DelayFrames
	ld a, [wRodResponse]
	and a
	ld hl, NoNibbleText
	jr z, .done
	cp $2
	ld hl, NothingHereText
	jr z, .done
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to home/overworld.asm and overwrite four functions with the four functions below:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;modified to properly load female trainer sprites
LoadWalkingPlayerSpriteGraphics::
	callba LoadRedSpriteToDE
;	ld hl, vNPCSprites
	jr LoadPlayerSpriteGraphicsCommon

LoadSurfingPlayerSpriteGraphics::
	callba LoadSeelSpriteToDE
;	ld hl, vNPCSprites
	jr LoadPlayerSpriteGraphicsCommon

LoadBikePlayerSpriteGraphics::
	callba LoadRedCyclingSpriteToDE
;	ld hl, vNPCSprites

LoadPlayerSpriteGraphicsCommon::
	ld hl, vNPCSprites
	push de
	push hl
	call .isfemaletrainer
	call CopyVideoData
	pop hl
	pop de
	ld a, $c0
	add e
	ld e, a
	jr nc, .noCarry
	inc d
.noCarry
	set 3, h
	call .isfemaletrainer
	jp CopyVideoData
.isfemaletrainer
	lb bc, BANK(RedFSprite), $0c
	ld a, [wUnusedD721]
	;load the regular sprite bank if female bit cleared or overriding female bit set
	;otherwise load the female player sprite bank
	and %00000101
	xor %00000001
	jr z, .donefemale
	lb bc, BANK(RedSprite), $0c
.donefemale
	ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to text/oakspeech.asm and add the following at the bottom of the file:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ask if female trainer
_AskIfGirlText::
	text "Are you a girl?"
	done
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to engine/oak_speech.asm and add the following at the bottom of the file:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
AskIfGirlText::	;text to ask if female trainer
	TX_FAR _AskIfGirlText
	db "@"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Also in engine/oak_speech.asm you need to overwrite the OakSpeech function with the following function:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
OakSpeech:
	call ClearScreen
	call LoadTextBoxTilePatterns
	call SetDefaultNames
	predef InitPlayerData2
;joenote - give option to play as a female trainer here
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ld hl, AskIfGirlText
	call PrintText
	call NoYesChoice
	ld a, [wCurrentMenuItem]
	and a
	ld [wUnusedD721], a
	call ClearScreen
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ld a, $FF
	call PlaySound ; stop music
	ld a, BANK(Music_Routes2)
	ld c, a
	ld a, MUSIC_ROUTES2
	call PlayMusic
	ld hl, wNumBoxItems
	ld a, POTION
	ld [wcf91], a
	ld a, 1
	ld [wItemQuantity], a
	call AddItemToInventory  ; give one potion
	ld a, [wDefaultMap]
	ld [wDestinationMap], a
	call SpecialWarpIn
	xor a
	ld [hTilesetType], a
	ld a, [wd732]
	bit 1, a ; possibly a debug mode bit
	jp nz, .skipChoosingNames
	ld de, ProfOakPic
	lb bc, Bank(ProfOakPic), $00
	call IntroDisplayPicCenteredOrUpperRight
	call FadeInIntroPic
	ld hl, OakSpeechText1
	call PrintText
	call GBFadeOutToWhite
	call ClearScreen
	ld a, NIDORINO
	ld [wd0b5], a
	ld [wcf91], a
	call GetMonHeader
	coord hl, 6, 4
	call LoadFlippedFrontSpriteByMonIndex
	call MovePicLeft
	ld hl, OakSpeechText2
	call PrintText
	call GBFadeOutToWhite
	call ClearScreen
;joenote - support female sprite
	ld de, RedPicFFront
	lb bc, BANK(RedPicFFront), $00
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale_front
	ld de, RedPicFront
	lb bc, BANK(RedPicFront), $00
.donefemale_front	call IntroDisplayPicCenteredOrUpperRight
	call MovePicLeft
	ld hl, IntroducePlayerText
	call PrintText
	call ChoosePlayerName
	call GBFadeOutToWhite
	call ClearScreen
	ld de, Rival1Pic
	lb bc, Bank(Rival1Pic), $00
	call IntroDisplayPicCenteredOrUpperRight
	call FadeInIntroPic
	ld hl, IntroduceRivalText
	call PrintText
	call ChooseRivalName
.skipChoosingNames
	call GBFadeOutToWhite
	call ClearScreen
;joenote - support female sprite
	ld de, RedPicFFront
	lb bc, BANK(RedPicFFront), $00
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale_front2
	ld de, RedPicFront
	lb bc, BANK(RedPicFront), $00
.donefemale_front2	call IntroDisplayPicCenteredOrUpperRight
	call GBFadeInFromWhite
	ld a, [wd72d]
	and a
	jr nz, .next
	ld hl, OakSpeechText3
	call PrintText
.next
	ld a, [H_LOADEDROMBANK]
	push af
	ld a, SFX_SHRINK
	call PlaySound
	pop af
	ld [H_LOADEDROMBANK], a
	ld [MBC1RomBank], a
	ld c, 4
	call DelayFrames
	ld de, RedSprite
	ld hl, vSprites
	lb bc, BANK(RedSprite), $0C
	call CopyVideoData
	ld de, ShrinkPic1
	lb bc, BANK(ShrinkPic1), $00
	call IntroDisplayPicCenteredOrUpperRight
	ld c, 4
	call DelayFrames
	ld de, ShrinkPic2
	lb bc, BANK(ShrinkPic2), $00
	call IntroDisplayPicCenteredOrUpperRight
	call ResetPlayerSpriteData
	ld a, [H_LOADEDROMBANK]
	push af
	ld a, BANK(Music_PalletTown)
	ld [wAudioROMBank], a
	ld [wAudioSavedROMBank], a
	ld a, 10
	ld [wAudioFadeOutControl], a
	ld a, $FF
	ld [wNewSoundID], a
	call PlaySound ; stop music
	pop af
	ld [H_LOADEDROMBANK], a
	ld [MBC1RomBank], a
	ld c, 20
	call DelayFrames
	coord hl, 6, 5
	ld b, 7
	ld c, 7
	call ClearScreenArea
	call LoadTextBoxTilePatterns
	ld a, 1
	ld [wUpdateSpritesEnabled], a
	ld c, 50
	call DelayFrames
	call GBFadeOutToWhite
	jp ClearScreen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to engine/oak_speech2.asm and overwrite the 
ChoosePlayerName, DefaultNamesPlayerF, and DefaultNamesPlayerListF 
functions with the following three respective functions:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ChoosePlayerName:
	call OakSpeechSlidePicRight
;joenote - support female trainer sprite
	ld de, DefaultNamesPlayerF
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale_names
	ld de, DefaultNamesPlayer
.donefemale_names
	call DisplayIntroNameTextBox
	ld a, [wCurrentMenuItem]
	and a
	jr z, .customName
;joenote - support female trainer sprite
	push af
	ld hl, DefaultNamesPlayerListF
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale_names2
	ld hl, DefaultNamesPlayerList
.donefemale_names2
	pop af
	call GetDefaultName
	ld de, wPlayerName
	call OakSpeechSlidePicLeft
	jr .done
.customName
	ld hl, wPlayerName
	xor a ; NAME_PLAYER_SCREEN
	ld [wNamingScreenType], a
	call DisplayNamingScreen
	ld a, [wcf4b]
	cp "@"
	jr z, .customName
	call ClearScreen
	call Delay3
;joenote - support female trainer sprite
	ld de, RedPicFFront
	ld b, BANK(RedPicFFront)
	ld a, [wUnusedD721]
	bit 0, a	;check if girl
	jr nz, .donefemale_front
	ld de, RedPicFront
	ld b, BANK(RedPicFront)
.donefemale_front
	call IntroDisplayPicCenteredOrUpperRight
.done
	ld hl, YourNameIsText
	jp PrintText
	

;joenote - set female trainer names
DefaultNamesPlayerF:
	db   "NEW NAME"
	next "YELLOW"
	next "CLAIRE"
	next "JILL"
	db   "@"
	
;joenote - set female trainer names
DefaultNamesPlayerListF:
	db "NEW NAME@"
	db "YELLOW@"
	db "CLAIRE@"
	db "JILL@"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Go to your main.asm file and scroll down to 
SECTION "bank2D",ROMX,BANK[$2D]
This is a known blank rom bank. 
If the section isn't there, you can create it at the bottom of the file.
Anyway, add the following lines under section $2D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INCLUDE "custom_functions/func_overworld.asm"
;joenote - adding female trainer sprites
RedPicFBack::           INCBIN "pic/trainer/redb_f.pic"
RedPicFFront:: 			INCBIN "pic/trainer/red_f.pic"
RedFSprite:            INCBIN "gfx/sprites/redf.2bpp"
RedFCyclingSprite:     INCBIN "gfx/sprites/cyclingf.2bpp"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;